"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[80449],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},27660:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>m,default:()=>y,frontMatter:()=>u,metadata:()=>f,toc:()=>b});var r=n(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))s.call(t,n)&&p(e,n,t[n]);if(l)for(var n of l(t))c.call(t,n)&&p(e,n,t[n]);return e};const u={id:"onBeforeKeystroke",title:"On Before Keystroke"},m=void 0,f={unversionedId:"Events/onBeforeKeystroke",id:"version-19/Events/onBeforeKeystroke",title:"On Before Keystroke",description:"|Code|Can be called by|Definition|",source:"@site/versioned_docs/version-19/Events/onBeforeKeystroke.md",sourceDirName:"Events",slug:"/Events/onBeforeKeystroke",permalink:"/docs/pt/19/Events/onBeforeKeystroke",draft:!1,tags:[],version:"19",frontMatter:{id:"onBeforeKeystroke",title:"On Before Keystroke"},sidebar:"docs",previous:{title:"On Before Data Entry",permalink:"/docs/pt/19/Events/onBeforeDataEntry"},next:{title:"On Begin Drag Over",permalink:"/docs/pt/19/Events/onBeginDragOver"}},k={},b=[{value:"Description",id:"description",level:2},{value:"Non-enterable objects",id:"non-enterable-objects",level:3},{value:"Keystroke sequence",id:"keystroke-sequence",level:3},{value:"See also",id:"see-also",level:3}],h={toc:b};function y(e){var t,n=e,{components:a}=n,p=((e,t)=>{var n={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&c.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=d(d({},h),p),o(t,i({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Code"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Can be called by"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Definition"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",d({parentName:"tr"},{align:null}),"17"),(0,r.kt)("td",d({parentName:"tr"},{align:null}),(0,r.kt)("a",d({parentName:"td"},{href:"FormObjects/writeProArea_overview"}),"4D Write Pro area")," - ",(0,r.kt)("a",d({parentName:"td"},{href:"/docs/pt/19/FormObjects/comboBoxOverview"}),"Combo Box")," - Form - ",(0,r.kt)("a",d({parentName:"td"},{href:"/docs/pt/19/FormObjects/inputOverview"}),"Input")," - ",(0,r.kt)("a",d({parentName:"td"},{href:"/docs/pt/19/FormObjects/listboxOverview"}),"List Box")," - ",(0,r.kt)("a",d({parentName:"td"},{href:"/docs/pt/19/FormObjects/listboxOverview#list-box-columns"}),"List Box Column")),(0,r.kt)("td",d({parentName:"tr"},{align:null}),"A character is about to be entered in the object that has the focus. ",(0,r.kt)("inlineCode",{parentName:"td"},"Get edited text")," returns the object's text ",(0,r.kt)("strong",{parentName:"td"},"without")," this character.")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"History"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Version"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Changes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",d({parentName:"tr"},{align:null}),"v18 R5"),(0,r.kt)("td",d({parentName:"tr"},{align:null}),"- Support in non-enterable list boxes- The event is now triggered after IME validation"))))),(0,r.kt)("h2",d({},{id:"description"}),"Description"),(0,r.kt)("p",null,"After the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Before Keystroke")," and ",(0,r.kt)("a",d({parentName:"p"},{href:"/docs/pt/19/Events/onAfterKeystroke"}),(0,r.kt)("inlineCode",{parentName:"a"},"On After Keystroke event"))," events are selected for an object, you can detect and handle the keystrokes within the object, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Form event code")," command that will return ",(0,r.kt)("inlineCode",{parentName:"p"},"On Before Keystroke")," and then ",(0,r.kt)("a",d({parentName:"p"},{href:"/docs/pt/19/Events/onAfterKeystroke"}),(0,r.kt)("inlineCode",{parentName:"a"},"On After Keystroke event"))," (for more information, please refer to the description of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Get edited text")," command). Within the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Before Keystroke")," event, the ",(0,r.kt)("inlineCode",{parentName:"p"},"FILTER KEYSTROKE")," command can be used to filter typed chars."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"These events are also activated by language commands that simulate a user action like ",(0,r.kt)("inlineCode",{parentName:"p"},"POST KEY"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"On Before Keystroke")," event is not generated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"in a ",(0,r.kt)("a",d({parentName:"li"},{href:"/docs/pt/19/FormObjects/listboxOverview#list-box-columns"}),"list box column")," method except when a cell is being edited (however it is generated in any cases in the ",(0,r.kt)("a",d({parentName:"li"},{href:"/docs/pt/19/FormObjects/listboxOverview"}),"list box")," method),"),(0,r.kt)("li",{parentName:"ul"},"when user modifications are not carried out using the keyboard (paste, drag-and-drop, checkbox, drop down list, combo box). To process these events, you must use ",(0,r.kt)("a",d({parentName:"li"},{href:"/docs/pt/19/Events/onAfterEdit"}),(0,r.kt)("inlineCode",{parentName:"a"},"On After Edit")),".")),(0,r.kt)("h3",d({},{id:"non-enterable-objects"}),"Non-enterable objects"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"On Before Keystroke")," event can be generated in non-enterable objects, e.g. in a list box even if the list box cells are not enterable, or rows are not selectable. This allows you to build interfaces where the user can scroll dynamically to a specific row in a list box by entering the first letters of a value. In case where the list box cells are enterable, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Is editing text")," command to know if the user is actually entering text in a cell or is using the type-ahead feature and then, execute appropriate code."),(0,r.kt)("h3",d({},{id:"keystroke-sequence"}),"Keystroke sequence"),(0,r.kt)("p",null,"When an entry requires a sequence of keystrokes, the ",(0,r.kt)("inlineCode",{parentName:"p"},"On Before Keystroke")," and ",(0,r.kt)("a",d({parentName:"p"},{href:"/docs/pt/19/Events/onAfterKeystroke"}),(0,r.kt)("inlineCode",{parentName:"a"},"On After Keystroke"))," events are generated only when the entry is fully validaded by the user. The ",(0,r.kt)("inlineCode",{parentName:"p"},"Keystroke")," command returns the validated character. This case mainly occurs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'when using "dead" keys such as ^ or ~: events are generated only when the extended character is eventuelly entered (e.g. "\xea" or \xf1),'),(0,r.kt)("li",{parentName:"ul"},"when an IME (Input method editor) displays an intermediary dialog box where the user can enter a combination of characters: events are generated only when the IME dialog is validated.")),(0,r.kt)("h3",d({},{id:"see-also"}),"See also"),(0,r.kt)("p",null,(0,r.kt)("a",d({parentName:"p"},{href:"/docs/pt/19/Events/onAfterKeystroke"}),"On After Keystroke"),"."))}y.isMDXComponent=!0}}]);