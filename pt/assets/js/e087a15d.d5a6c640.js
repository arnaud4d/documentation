"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[79403],{3905:(e,t,n)=>{n.d(t,{Zo:()=>b,kt:()=>d});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=l,u=m["".concat(p,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(u,o(o({ref:t},b),{},{components:n})):a.createElement(u,o({ref:t},b))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>b});n(67294);var a=n(3905);function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}const o={id:"BlobClass",title:"Blob"},i=void 0,p={unversionedId:"API/BlobClass",id:"API/BlobClass",title:"Blob",description:"The Blob class lets you create and manipulate blob objects (4D. Blob).",source:"@site/i18n/pt/docusaurus-plugin-content-docs/current/API/BlobClass.md",sourceDirName:"API",slug:"/API/BlobClass",permalink:"/docs/pt/next/API/BlobClass",draft:!1,tags:[],version:"current",frontMatter:{id:"BlobClass",title:"Blob"},sidebar:"docs",previous:{title:"Class API Overview",permalink:"/docs/pt/next/API/overview"},next:{title:"Class",permalink:"/docs/pt/next/API/ClassClass"}},s={},b=[{value:"Resumo",id:"resumo",level:3},{value:"4D.Blob.new()",id:"4dblobnew",level:2},{value:"Descr\xe7\xe3o",id:"descr\xe7\xe3o",level:4},{value:".size",id:"size",level:2},{value:"Descr\xe7\xe3o",id:"descr\xe7\xe3o-1",level:4},{value:".slice()",id:"slice",level:2},{value:"Descr\xe7\xe3o",id:"descr\xe7\xe3o-2",level:4},{value:"Exemplo",id:"exemplo",level:4}],c={toc:b};function m(e){var{components:t}=e,n=r(e,["components"]);return(0,a.kt)("wrapper",l({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Blob class lets you create and manipulate ",(0,a.kt)("a",l({parentName:"p"},{href:"/docs/pt/next/Concepts/blob#blob-types"}),"blob objects")," (",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob"),")."),(0,a.kt)("h3",l({},{id:"resumo"}),"Resumo"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}))))),(0,a.kt)("p",null,"| ",(0,a.kt)("a",l({parentName:"p"},{href:"#4dblobnew"}),(0,a.kt)("strong",{parentName:"a"},"4D.Blob.new()")," : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"a"},"4D.Blob.new"),"( ",(0,a.kt)("em",{parentName:"a"},"blobScal")," : Blob ) : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"a"},"4D.Blob.new"),"( ",(0,a.kt)("em",{parentName:"a"},"blobObj")," : 4D.Blob ) : 4D.Blob"),"\xa0","\xa0","\xa0","\xa0","creates a new ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob")," object optionally encapsulating a copy of the data from another blob (scalar blob or ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob"),")|\n| ",(0,a.kt)("a",l({parentName:"p"},{href:"#size"}),(0,a.kt)("strong",{parentName:"a"},".size")," : Real"),"\xa0","\xa0","\xa0","\xa0","Blob",(0,a.kt)("inlineCode",{parentName:"p"},"||\n| [\n**.slice()** : 4D. Blob<br/>**.slice**( *start* : Real ) : 4D. Blob<br/>**.slice**( *start* : Real; *end* : Real ) : 4D. Blob](#slice)&nbsp;&nbsp;&nbsp;&nbsp; creates and returns a "),"4D. Blob` that references data from a subset of the blob on which it's called. The original blob is not altered.|"),(0,a.kt)("h2",l({},{id:"4dblobnew"}),"4D.Blob.new()"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Hist\xf3rico"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Vers\xe3o"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Mudan\xe7as"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"v19 R2"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Adicionado"))))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"4D.Blob.new()")," : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},"4D.Blob.new"),"( ",(0,a.kt)("em",{parentName:"p"},"blobScal")," : Blob ) : 4D.Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},"4D.Blob.new"),"( ",(0,a.kt)("em",{parentName:"p"},"blobObj")," : 4D.Blob ) : 4D.Blob"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Parameter"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Tipo"),(0,a.kt)("th",l({parentName:"tr"},{align:"center"})),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Descr\xe7\xe3o"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"blob"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Blob or 4D.Blob"),(0,a.kt)("td",l({parentName:"tr"},{align:"center"}),"->"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Blob to copy")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Resultados"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"4D.Blob"),(0,a.kt)("td",l({parentName:"tr"},{align:"center"}),"<-"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"New 4D.Blob")))),(0,a.kt)("p",null,"|"),(0,a.kt)("h4",l({},{id:"descr\xe7\xe3o"}),"Descr\xe7\xe3o"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob.new")," creates a new ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob")," object optionally encapsulating a copy of the data from another blob (scalar blob or ",(0,a.kt)("inlineCode",{parentName:"p"},"4D.Blob"),")."),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"blob")," parameter is omitted, the method returns an empty 4D. Blob."),(0,a.kt)("h2",l({},{id:"size"}),".size"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},".size")," : Real"),(0,a.kt)("h4",l({},{id:"descr\xe7\xe3o-1"}),"Descr\xe7\xe3o"),(0,a.kt)("p",null,"New ",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob"),"|"),(0,a.kt)("h2",l({},{id:"slice"}),".slice()"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Hist\xf3rico"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Vers\xe3o"),(0,a.kt)("th",l({parentName:"tr"},{align:null}),"Mudan\xe7as"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",l({parentName:"tr"},{align:null}),"v19 R2"),(0,a.kt)("td",l({parentName:"tr"},{align:null}),"Adicionado"))))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},".slice()")," : 4D. Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},".slice"),"( ",(0,a.kt)("em",{parentName:"p"},"start")," : Real ) : 4D. Blob",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},".slice"),"( ",(0,a.kt)("em",{parentName:"p"},"start")," : Real; ",(0,a.kt)("em",{parentName:"p"},"end")," : Real ) : 4D. Blob\n| Parameter  | Tipo    |    | Descr\xe7\xe3o                                                                |\n| ---------- | ------- |:--:| ----------------------------------------------------------------------- |\n| start      | Real    | -> | index of the first byte to include in the new ",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob"),".               |\n| end        | Real    | -> | index of the first byte that will not be included in the new ",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob")," |\n| Resultados | 4D.Blob | <- | New ",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob"),"|\n|"),(0,a.kt)("h4",l({},{id:"descr\xe7\xe3o-2"}),"Descr\xe7\xe3o"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},".slice()"),"  creates and returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob")," that references data from a subset of the blob on which it's called. The original blob is not altered.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," parameter is an index into the blob indicating the first byte to include in the new ",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob"),". If you specify a negative value, 4D treats it as an offset from the end of the blob toward the beginning. For example, -10 would be the 10th from last byte in the blob. The default value is 0. If you specify a value for start that is larger than the size of the source blob, the returned ",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob"),"'s size is 0, and it contains no data."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," parameter is an index into the blob indicating the first byte that will not be included in the new ",(0,a.kt)("inlineCode",{parentName:"p"},"4D. Blob")," (i.e. the byte exactly at this index is not included). If you specify a negative value, 4D treats it as an offset from the end of the blob toward the beginning. For example, -10 would be the 10th from last byte in the blob. The default value is the size of the blob."),(0,a.kt)("h4",l({},{id:"exemplo"}),"Exemplo"),(0,a.kt)("pre",null,(0,a.kt)("code",l({parentName:"pre"},{className:"language-4d"}),'var $myBlob : 4D. Blob\n\n// Store text in a 4D. Blob CONVERT FROM TEXT("Hello, World!"; "UTF-8"; $myBlob)\n$is4DBlob:=OB Instance of($myBlob; 4D. Blob);   //True\n\n$myString:=Convert to text($myBlob; "UTF-8")\n// $myString contains "Hello, World!"\n\n// Create a new 4D. Blob from $myBlob\n$myNewBlob:=$myBlob.slice(0; 5)\n\n$myString:=Convert to text($myNewBlob; "UTF-8")\n// $myString contains "Hello"\n')))}m.isMDXComponent=!0}}]);